"""add payment reminders and service orders

Revision ID: add_payment_reminders_and_service_orders
Revises: 0584ea468465
Create Date: 2025-09-30 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'add_payment_reminders_and_service_orders'
down_revision = '0584ea468465'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Create payment_reminder table
    op.create_table('payment_reminder',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('amount', sa.Float(), nullable=True),
                    sa.Column('currency', sa.String(length=10), nullable=True),
                    sa.Column('due_date', sa.DateTime(), nullable=False),
                    sa.Column('status', sa.String(length=50), nullable=True),
                    sa.Column('recurrence', sa.String(
                        length=50), nullable=True),
                    sa.Column('reminder_days', sa.Integer(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # Create service_order table
    op.create_table('service_order',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('title', sa.String(length=200), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('client_name', sa.String(
                        length=200), nullable=False),
                    sa.Column('client_email', sa.String(
                        length=120), nullable=True),
                    sa.Column('client_phone', sa.String(
                        length=50), nullable=True),
                    sa.Column('service_type', sa.String(
                        length=100), nullable=False),
                    sa.Column('status', sa.String(length=50), nullable=True),
                    sa.Column('priority', sa.String(length=50), nullable=True),
                    sa.Column('estimated_hours', sa.Float(), nullable=True),
                    sa.Column('hourly_rate', sa.Float(), nullable=True),
                    sa.Column('monthly_status', sa.JSON(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=True),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('assigned_to', sa.Integer(), nullable=True),
                    sa.Column('created_by', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['assigned_to'], ['user.id'], ),
                    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # Add default values
    op.execute(
        "UPDATE payment_reminder SET currency = 'USD' WHERE currency IS NULL")
    op.execute(
        "UPDATE payment_reminder SET status = 'pending' WHERE status IS NULL")
    op.execute(
        "UPDATE payment_reminder SET recurrence = 'one_time' WHERE recurrence IS NULL")
    op.execute(
        "UPDATE payment_reminder SET reminder_days = 7 WHERE reminder_days IS NULL")

    op.execute("UPDATE service_order SET status = 'pending' WHERE status IS NULL")
    op.execute(
        "UPDATE service_order SET priority = 'medium' WHERE priority IS NULL")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('service_order')
    op.drop_table('payment_reminder')
    # ### end Alembic commands ###
